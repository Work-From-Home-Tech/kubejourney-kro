apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: wordpress
spec:
  # kro uses this simple schema to create your CRD schema and apply it
  # The schema defines what users can provide when they instantiate the RGD (create an instance).
  schema:
    apiVersion: v1alpha1
    kind: WordpressServer
    spec:
      # Spec fields that users can provide.
      name: string
      namespace: string | default="default"
      image: string | default="wordpress:6.4-apache"
      ingress:
        enabled: boolean | default=false
        host: string | default=""
        port: integer | default=80
      db_password: string | default="my-secret-pw"
      replicas: integer | default=1
      storage:
        storageClass: string | default="local-path"
        wordpress:
          size: string | default="10Gi"
        mariadb:
          size: string | default="20Gi"
        enabled: boolean | default=true
    status:
      # Fields the controller will inject into instances status.
      frontendConditions: ${frontend.status.conditions}
      backendConditions: ${backend.status.conditions}
      availableReplicas: ${frontend.status.availableReplicas}
      serviceEndpoint: ${service.spec.clusterIP}

  # Define the resources this API will manage.
  resources:
    - id: wordpressPV
      includeWhen:
        - ${schema.spec.storage.enabled}
      template:
        apiVersion: v1
        kind: PersistentVolume
        metadata:
          name: ${schema.spec.name}-wordpress-pv
        spec:
          capacity:
            storage: ${schema.spec.storage.wordpress.size}
          accessModes:
            - ReadWriteOnce
          storageClassName: ${schema.spec.storage.storageClass}
          hostPath:
            path: /tmp/${schema.spec.name}-wordpress-data
            type: DirectoryOrCreate

    - id: mariadbPV
      includeWhen:
        - ${schema.spec.storage.enabled}
      template:
        apiVersion: v1
        kind: PersistentVolume
        metadata:
          name: ${schema.spec.name}-mariadb-pv
        spec:
          capacity:
            storage: ${schema.spec.storage.mariadb.size}
          accessModes:
            - ReadWriteOnce
          storageClassName: ${schema.spec.storage.storageClass}
          hostPath:
            path: /tmp/${schema.spec.name}-mariadb-data
            type: DirectoryOrCreate

    - id: wordpressPVC
      includeWhen:
        - ${schema.spec.storage.enabled}
      template:
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: ${schema.spec.name}-wordpress-pvc
          namespace: ${schema.spec.namespace}
        spec:
          accessModes:
            - ReadWriteOnce
          storageClassName: ${schema.spec.storage.storageClass}
          resources:
            requests:
              storage: ${schema.spec.storage.wordpress.size}

    - id: mariadbPVC
      includeWhen:
        - ${schema.spec.storage.enabled}
      template:
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: ${schema.spec.name}-mariadb-pvc
          namespace: ${schema.spec.namespace}
        spec:
          accessModes:
            - ReadWriteOnce
          storageClassName: ${schema.spec.storage.storageClass}
          resources:
            requests:
              storage: ${schema.spec.storage.mariadb.size}

    - id: frontend
      includeWhen:
        - ${schema.spec.storage.enabled}
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${schema.spec.name} # Use the name provided by user
        spec:
          replicas: ${schema.spec.replicas}
          selector:
            matchLabels:
              app: ${schema.spec.name}
          template:
            metadata:
              labels:
                app: ${schema.spec.name}
            spec:
              containers:
                - name: ${schema.spec.name}
                  image: ${schema.spec.image} # Use the image provided by user
                  env:
                    - name: WORDPRESS_DB_HOST
                      value: ${schema.spec.name}-service-db.${schema.spec.namespace}.svc:3306
                    - name: WORDPRESS_DB_NAME
                      value: wordpress
                    - name: WORDPRESS_DB_USER
                      value: root
                    - name: WORDPRESS_DB_PASSWORD
                      value: ${schema.spec.db_password}
                  ports:
                    - containerPort: 80
                      name: wordpress
                  volumeMounts:
                    - name: wordpress-storage
                      mountPath: /var/www/html
              volumes:
                - name: wordpress-storage
                  persistentVolumeClaim:
                    claimName: ${schema.spec.name}-wordpress-pvc

    - id: frontendNoStorage
      includeWhen:
        - ${!schema.spec.storage.enabled}
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${schema.spec.name} # Use the name provided by user
        spec:
          replicas: ${schema.spec.replicas}
          selector:
            matchLabels:
              app: ${schema.spec.name}
          template:
            metadata:
              labels:
                app: ${schema.spec.name}
            spec:
              containers:
                - name: ${schema.spec.name}
                  image: ${schema.spec.image} # Use the image provided by user
                  env:
                    - name: WORDPRESS_DB_HOST
                      value: ${schema.spec.name}-service-db.${schema.spec.namespace}.svc:3306
                    - name: WORDPRESS_DB_NAME
                      value: wordpress
                    - name: WORDPRESS_DB_USER
                      value: root
                    - name: WORDPRESS_DB_PASSWORD
                      value: ${schema.spec.db_password}
                  ports:
                    - containerPort: 80
                      name: wordpress
                  volumeMounts:
                    - name: wordpress-storage
                      mountPath: /var/www/html
              volumes:
                - name: wordpress-storage
                  emptyDir: {}

    - id: backend
      includeWhen:
        - ${schema.spec.storage.enabled}
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${schema.spec.name}-db # Use the name provided by user
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: ${schema.spec.name}-db
          template:
            metadata:
              labels:
                app: ${schema.spec.name}-db
            spec:
              containers:
                - name: ${schema.spec.name}-db
                  image: mariadb:10.6 # Use the image provided by user
                  env:
                  - name: MYSQL_ROOT_PASSWORD
                    value: ${schema.spec.db_password}
                  - name: MYSQL_DATABASE
                    value: wordpress
                  ports:
                    - containerPort: 3306
                  volumeMounts:
                    - name: mariadb-storage
                      mountPath: /var/lib/mysql
              volumes:
                - name: mariadb-storage
                  persistentVolumeClaim:
                    claimName: ${schema.spec.name}-mariadb-pvc

    - id: backendNoStorage
      includeWhen:
        - ${!schema.spec.storage.enabled}
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${schema.spec.name}-db # Use the name provided by user
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: ${schema.spec.name}-db
          template:
            metadata:
              labels:
                app: ${schema.spec.name}-db
            spec:
              containers:
                - name: ${schema.spec.name}-db
                  image: mariadb:10.6 # Use the image provided by user
                  env:
                  - name: MYSQL_ROOT_PASSWORD
                    value: ${schema.spec.db_password}
                  - name: MYSQL_DATABASE
                    value: wordpress
                  ports:
                    - containerPort: 3306

    - id: service
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: ${schema.spec.name}-service
        spec:
          selector: # ${frontend.spec.selector.matchLabels} # Use the Wordpress deployment selector
            app: ${schema.spec.name}
          ports:
            - protocol: TCP
              port: 80
              targetPort: 80

    - id: serviceDb
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: ${schema.spec.name}-service-db
        spec:
          selector:
            app: ${schema.spec.name}-db # Use the DB deployment selector
          ports:
            - protocol: TCP
              port: 3306
              targetPort: 3306

    - id: ingress
      includeWhen:
        - ${schema.spec.ingress.enabled}
      template:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: ${schema.spec.name}-ingress
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
        spec:
          ingressClassName: nginx
          rules:
            - host: ${schema.spec.ingress.host}
              http:
                paths:
                  - path: "/"
                    pathType: Prefix
                    backend:
                      service:
                        name: ${service.metadata.name}
                        port:
                          number: ${schema.spec.ingress.port}
